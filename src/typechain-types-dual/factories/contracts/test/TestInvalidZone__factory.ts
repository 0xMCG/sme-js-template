/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestInvalidZone,
  TestInvalidZoneInterface,
} from "../../../contracts/test/TestInvalidZone";

const _abi = [
  {
    inputs: [],
    name: "getSeaportMetadata",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "metadata",
            type: "bytes",
          },
        ],
        internalType: "struct Schema[]",
        name: "schemas",
        type: "tuple[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "fulfiller",
            type: "address",
          },
          {
            internalType: "address",
            name: "offerer",
            type: "address",
          },
          {
            components: [
              {
                internalType: "enum ItemType",
                name: "itemType",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "identifier",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct SpentItem[]",
            name: "offer",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "enum ItemType",
                name: "itemType",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "identifier",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "address payable",
                name: "recipient",
                type: "address",
              },
            ],
            internalType: "struct ReceivedItem[]",
            name: "consideration",
            type: "tuple[]",
          },
          {
            internalType: "bytes",
            name: "extraData",
            type: "bytes",
          },
          {
            internalType: "bytes32[]",
            name: "orderHashes",
            type: "bytes32[]",
          },
          {
            internalType: "uint256",
            name: "startTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTime",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "zoneHash",
            type: "bytes32",
          },
        ],
        internalType: "struct ZoneParameters",
        name: "",
        type: "tuple",
      },
    ],
    name: "validateOrder",
    outputs: [
      {
        internalType: "bytes4",
        name: "validOrderMagicValue",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610466908161001c8239f35b600080fdfe60806040908082526004918236101561001757600080fd5b600091823560e01c90816301ffc9a7146102b35750806317b1f9421461023257632e778efc1461004657600080fd5b3461022e57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022e5761007c6103ce565b600190818152835b6020808210156100eb5784519085820182811067ffffffffffffffff8211176100bf5786528682526060828201528383010152602001610084565b60248860418b7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b5050919093610bbb6100fc8461041d565b515281516020918282019082821067ffffffffffffffff83111761020257508392959396949652828152846101308761041d565b51015261013b6103ce565b93600885527f546573745a6f6e650000000000000000000000000000000000000000000000008186015261017782519583875283870190610370565b858103828701528651928382528282019083808660051b850101990195925b8584106101a357888a0389f35b9091929394959685806101ef8c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086869f0301885286838d518051845201519181858201520190610370565b9b99019796959190910193019190610196565b8660416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b5080fd5b5082346102af577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc906020823601126102ab57359067ffffffffffffffff82116102ab57610140913603011261022e57602090517f2e778efc000000000000000000000000000000000000000000000000000000008152f35b8380fd5b8280fd5b839085346102af5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102af57357fffffffff0000000000000000000000000000000000000000000000000000000081168091036102af57602092507f3839be19000000000000000000000000000000000000000000000000000000008114908115610346575b5015158152f35b7f01ffc9a7000000000000000000000000000000000000000000000000000000009150148361033f565b919082519283825260005b8481106103ba5750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b60208183018101518483018201520161037b565b604051906040820182811067ffffffffffffffff8211176103ee57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b80511561042a5760200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea164736f6c6343000811000a";

type TestInvalidZoneConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestInvalidZoneConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestInvalidZone__factory extends ContractFactory {
  constructor(...args: TestInvalidZoneConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestInvalidZone> {
    return super.deploy(overrides || {}) as Promise<TestInvalidZone>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestInvalidZone {
    return super.attach(address) as TestInvalidZone;
  }
  override connect(signer: Signer): TestInvalidZone__factory {
    return super.connect(signer) as TestInvalidZone__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestInvalidZoneInterface {
    return new utils.Interface(_abi) as TestInvalidZoneInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestInvalidZone {
    return new Contract(address, _abi, signerOrProvider) as TestInvalidZone;
  }
}
