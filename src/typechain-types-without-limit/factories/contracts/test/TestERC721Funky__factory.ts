/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestERC721Funky,
  TestERC721FunkyInterface,
} from "../../../contracts/test/TestERC721Funky";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "royaltyInfo",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080346200031a576001600160401b03906040908082018381118282101762000304578252600f81526020926e5465737445524337323146756e6b7960881b8483015282518381018181108382111762000304578452600b81526a54535437323146554e4b5960a81b85820152825190828211620003045760008054926001958685811c95168015620002f9575b89861014620002e5578190601f9586811162000292575b5089908683116001146200022e57849262000222575b5050600019600383901b1c191690861b1781555b81519384116200020e5784548581811c9116801562000203575b88821014620001ef57838111620001a7575b5086928411600114620001415783949596509262000135575b5050600019600383901b1c191690821b1790555b516112b39081620003208239f35b01519050388062000113565b9190601f1984169685845280842093905b8882106200018f575050838596971062000175575b505050811b01905562000127565b015160001960f88460031b161c1916905538808062000167565b80878596829496860151815501950193019062000152565b8582528782208480870160051c8201928a8810620001e5575b0160051c019086905b828110620001d9575050620000fa565b838155018690620001c9565b92508192620001c0565b634e487b7160e01b82526022600452602482fd5b90607f1690620000e8565b634e487b7160e01b81526041600452602490fd5b015190503880620000ba565b8480528a85208994509190601f198416865b8d8282106200027b575050841162000261575b505050811b018155620000ce565b015160001960f88460031b161c1916905538808062000253565b8385015186558c9790950194938401930162000240565b9091508380528984208680850160051c8201928c8610620002db575b918a91869594930160051c01915b828110620002cc575050620000a4565b8681558594508a9101620002bc565b92508192620002ae565b634e487b7160e01b83526022600452602483fd5b94607f16946200008d565b634e487b7160e01b600052604160045260246000fd5b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826301ffc9a714610cd95750816306fdde0314610bfe578163081812fc14610ba3578163095ea7b314610ab557816323b872dd14610a9a5781632a55205a14610a5f57816340c10f191461092357816342842e0e146108245783826342966c681461072a575081636352211e146106c357816370a08231146105fa57816395d89b41146104a9578163a22cb465146103da578163b88d4fde14610209578163c87b56dd14610152575063e985e9c5146100d757600080fd5b3461014e57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261014e5760ff81602093610113610e9c565b61011b610ec4565b73ffffffffffffffffffffffffffffffffffffffff91821683526005875283832091168252855220549151911615158152f35b5080fd5b83833461014e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261014e578051918183019083821067ffffffffffffffff8311176101dd57506101d993508152600882527f746f6b656e55524900000000000000000000000000000000000000000000000060208301525191829182610e36565b0390f35b806041867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b9050346103d65760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103d657610242610e9c565b9061024b610ec4565b916044359260643567ffffffffffffffff928382116103d257366023830112156103d257818501359384116103d25736602485840101116103d257610291868483611076565b823b159586156102a9575b886102a688611241565b80f35b9091929380959650875195869485937f150b7a0200000000000000000000000000000000000000000000000000000000998a8652339086015273ffffffffffffffffffffffffffffffffffffffff80961660248601526044850152606484016080905281608485015260240160a48401378881830160a40152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01681010360a40192169181875a94602095f19283156103c957506102a6927fffffffff0000000000000000000000000000000000000000000000000000000091859161039b575b50161438808080808061029c565b6103bc915060203d81116103c2575b6103b48183610dc6565b810190611209565b3861038d565b503d6103aa565b513d85823e3d90fd5b8780fd5b8280fd5b50503461014e57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261014e57610412610e9c565b90602435908115158092036104a557338452600560205273ffffffffffffffffffffffffffffffffffffffff8185209316928385526020528084207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541660ff8416179055519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b8380fd5b919050346103d657827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103d65780519183600180549182821c9282811680156105f0575b60209586861082146105c45750848852908115610584575060011461052c575b6101d98686610522828b0383610dc6565b5191829182610e36565b9295508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b82841061057157505050826101d994610522928201019438610511565b8054868501880152928601928101610554565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001687860152505050151560051b8301019250610522826101d938610511565b8360226024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b93607f16936104f1565b8391503461014e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261014e5773ffffffffffffffffffffffffffffffffffffffff610649610e9c565b169081156106665760208480858581526003845220549051908152f35b60649060208551917f08c379a0000000000000000000000000000000000000000000000000000000008352820152600c60248201527f5a45524f5f4144445245535300000000000000000000000000000000000000006044820152fd5b9050346103d65760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103d6578160209373ffffffffffffffffffffffffffffffffffffffff923581526002855220541690610724821515610f47565b51908152f35b9150913461014e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261014e57823592838352600260205273ffffffffffffffffffffffffffffffffffffffff82842054169161078d831515610f47565b82845260036020528084207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81540190558484526002602052808420917fffffffffffffffffffffffff00000000000000000000000000000000000000009283815416905560205283209081541690557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8280a480f35b9050346103d65761083436610ee7565b929190610842848284611076565b803b15938415610857575b866102a686611241565b60209293945060a49087875195869485937f150b7a0200000000000000000000000000000000000000000000000000000000998a8652339086015273ffffffffffffffffffffffffffffffffffffffff8093166024860152604485015260806064850152826084850152165af19283156103c957506102a6927fffffffff00000000000000000000000000000000000000000000000000000000918591610905575b5016143880808061084d565b61091d915060203d81116103c2576103b48183610dc6565b386108f9565b919050346103d657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103d65761095c610e9c565b906024359273ffffffffffffffffffffffffffffffffffffffff80931692610985841515611011565b84865260026020528286205416610a03575081845260036020528084206001815401905582845260026020528320817fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a480f35b602060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152600e60248201527f414c52454144595f4d494e5445440000000000000000000000000000000000006044820152fd5b50503461014e57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261014e576020905161fee28152f35b8334610ab2576102a6610aac36610ee7565b91611076565b80fd5b9050346103d657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103d657610aed610e9c565b9060243592838552600260205273ffffffffffffffffffffffffffffffffffffffff90818187205416928333148015610b84575b610b2a90610fac565b8587526020528520921691827fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258480a480f35b508387526005602090815282882033895290528187205460ff16610b21565b9050346103d65760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103d657816020938273ffffffffffffffffffffffffffffffffffffffff9335825285522054169051908152f35b919050346103d657827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103d6578051918380549060019082821c928281168015610ccf575b60209586861082146105c457508488529081156105845750600114610c77576101d98686610522828b0383610dc6565b8080949750527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b828410610cbc57505050826101d994610522928201019438610511565b8054868501880152928601928101610c9f565b93607f1693610c47565b8491346103d65760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103d657357fffffffff0000000000000000000000000000000000000000000000000000000081168091036103d657602092507f01ffc9a7000000000000000000000000000000000000000000000000000000008114908115610d9c575b8115610d72575b5015158152f35b7f5b5e139f0000000000000000000000000000000000000000000000000000000091501483610d6b565b7f80ac58cd0000000000000000000000000000000000000000000000000000000081149150610d64565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610e0757604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60208082528251818301819052939260005b858110610e88575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006040809697860101520116010190565b818101830151848201604001528201610e48565b6004359073ffffffffffffffffffffffffffffffffffffffff82168203610ebf57565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff82168203610ebf57565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6060910112610ebf5773ffffffffffffffffffffffffffffffffffffffff906004358281168103610ebf57916024359081168103610ebf579060443590565b15610f4e57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f4d494e544544000000000000000000000000000000000000000000006044820152fd5b15610fb357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152fd5b1561101857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f524543495049454e540000000000000000000000000000006044820152fd5b600083815260206002815273ffffffffffffffffffffffffffffffffffffffff936040908580838620541695169485036111ac57906110f8867fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef95949316966110e0881515611011565b86331490811561118f575b8115611179575b50610fac565b848352600382528083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff815401905585835280832060018154019055868352600282526004818420927fffffffffffffffffffffffff000000000000000000000000000000000000000093888582541617905552822090815416905580a4565b90508885526004845282852054163314386110f2565b8786526005855283862033875285528386205460ff1691506110eb565b6064838351907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152600a60248201527f57524f4e475f46524f4d000000000000000000000000000000000000000000006044820152fd5b90816020910312610ebf57517fffffffff0000000000000000000000000000000000000000000000000000000081168103610ebf5790565b1561124857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f554e534146455f524543495049454e54000000000000000000000000000000006044820152fdfea164736f6c6343000811000a";

type TestERC721FunkyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestERC721FunkyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestERC721Funky__factory extends ContractFactory {
  constructor(...args: TestERC721FunkyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestERC721Funky> {
    return super.deploy(overrides || {}) as Promise<TestERC721Funky>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestERC721Funky {
    return super.attach(address) as TestERC721Funky;
  }
  override connect(signer: Signer): TestERC721Funky__factory {
    return super.connect(signer) as TestERC721Funky__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestERC721FunkyInterface {
    return new utils.Interface(_abi) as TestERC721FunkyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestERC721Funky {
    return new Contract(address, _abi, signerOrProvider) as TestERC721Funky;
  }
}
