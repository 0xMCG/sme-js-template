/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type ReceivedItemStruct = {
  itemType: PromiseOrValue<BigNumberish>;
  token: PromiseOrValue<string>;
  identifier: PromiseOrValue<BigNumberish>;
  amount: PromiseOrValue<BigNumberish>;
  recipient: PromiseOrValue<string>;
};

export type ReceivedItemStructOutput = [
  number,
  string,
  BigNumber,
  BigNumber,
  string
] & {
  itemType: number;
  token: string;
  identifier: BigNumber;
  amount: BigNumber;
  recipient: string;
};

export type SpentItemStruct = {
  itemType: PromiseOrValue<BigNumberish>;
  token: PromiseOrValue<string>;
  identifier: PromiseOrValue<BigNumberish>;
  amount: PromiseOrValue<BigNumberish>;
};

export type SpentItemStructOutput = [number, string, BigNumber, BigNumber] & {
  itemType: number;
  token: string;
  identifier: BigNumber;
  amount: BigNumber;
};

export type SchemaStruct = {
  id: PromiseOrValue<BigNumberish>;
  metadata: PromiseOrValue<BytesLike>;
};

export type SchemaStructOutput = [BigNumber, string] & {
  id: BigNumber;
  metadata: string;
};

export interface HashCalldataContractOffererInterface extends utils.Interface {
  functions: {
    "addDropItemMutation(uint8,uint256,bytes32)": FunctionFragment;
    "addExtraItemMutation(uint8,(uint8,address,uint256,uint256,address),bytes32)": FunctionFragment;
    "addItemAmountMutation(uint8,uint256,uint256,bytes32)": FunctionFragment;
    "dropItemMutations(uint256)": FunctionFragment;
    "extraItemMutations(uint256)": FunctionFragment;
    "failureReasons(bytes32)": FunctionFragment;
    "generateOrder(address,(uint8,address,uint256,uint256)[],(uint8,address,uint256,uint256)[],bytes)": FunctionFragment;
    "getSeaportMetadata()": FunctionFragment;
    "itemAmountMutations(uint256)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "orderHashToGenerateOrderDataHash(bytes32)": FunctionFragment;
    "orderHashToRatifyOrderDataHash(bytes32)": FunctionFragment;
    "previewOrder(address,address,(uint8,address,uint256,uint256)[],(uint8,address,uint256,uint256)[],bytes)": FunctionFragment;
    "ratifyOrder((uint8,address,uint256,uint256)[],(uint8,address,uint256,uint256,address)[],bytes,bytes32[],uint256)": FunctionFragment;
    "setExpectedOfferRecipient(address)": FunctionFragment;
    "setFailureReason(bytes32,uint8)": FunctionFragment;
    "setSeaportAddress(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addDropItemMutation"
      | "addExtraItemMutation"
      | "addItemAmountMutation"
      | "dropItemMutations"
      | "extraItemMutations"
      | "failureReasons"
      | "generateOrder"
      | "getSeaportMetadata"
      | "itemAmountMutations"
      | "onERC1155Received"
      | "orderHashToGenerateOrderDataHash"
      | "orderHashToRatifyOrderDataHash"
      | "previewOrder"
      | "ratifyOrder"
      | "setExpectedOfferRecipient"
      | "setFailureReason"
      | "setSeaportAddress"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addDropItemMutation",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addExtraItemMutation",
    values: [
      PromiseOrValue<BigNumberish>,
      ReceivedItemStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addItemAmountMutation",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dropItemMutations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "extraItemMutations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "failureReasons",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "generateOrder",
    values: [
      PromiseOrValue<string>,
      SpentItemStruct[],
      SpentItemStruct[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeaportMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "itemAmountMutations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "orderHashToGenerateOrderDataHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "orderHashToRatifyOrderDataHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "previewOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      SpentItemStruct[],
      SpentItemStruct[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ratifyOrder",
    values: [
      SpentItemStruct[],
      ReceivedItemStruct[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpectedOfferRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFailureReason",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSeaportAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addDropItemMutation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addExtraItemMutation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addItemAmountMutation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dropItemMutations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraItemMutations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failureReasons",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeaportMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "itemAmountMutations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderHashToGenerateOrderDataHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderHashToRatifyOrderDataHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ratifyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpectedOfferRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFailureReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSeaportAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "GenerateOrderDataHash(bytes32,bytes32)": EventFragment;
    "RatifyOrderDataHash(bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GenerateOrderDataHash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RatifyOrderDataHash"): EventFragment;
}

export interface GenerateOrderDataHashEventObject {
  orderHash: string;
  dataHash: string;
}
export type GenerateOrderDataHashEvent = TypedEvent<
  [string, string],
  GenerateOrderDataHashEventObject
>;

export type GenerateOrderDataHashEventFilter =
  TypedEventFilter<GenerateOrderDataHashEvent>;

export interface RatifyOrderDataHashEventObject {
  orderHash: string;
  dataHash: string;
}
export type RatifyOrderDataHashEvent = TypedEvent<
  [string, string],
  RatifyOrderDataHashEventObject
>;

export type RatifyOrderDataHashEventFilter =
  TypedEventFilter<RatifyOrderDataHashEvent>;

export interface HashCalldataContractOfferer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HashCalldataContractOffererInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addDropItemMutation(
      side: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addExtraItemMutation(
      side: PromiseOrValue<BigNumberish>,
      item: ReceivedItemStruct,
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addItemAmountMutation(
      side: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      newAmount: PromiseOrValue<BigNumberish>,
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dropItemMutations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string] & {
        side: number;
        index: BigNumber;
        orderHash: string;
      }
    >;

    extraItemMutations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, ReceivedItemStructOutput, string] & {
        side: number;
        item: ReceivedItemStructOutput;
        orderHash: string;
      }
    >;

    failureReasons(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    generateOrder(
      fulfiller: PromiseOrValue<string>,
      a: SpentItemStruct[],
      b: SpentItemStruct[],
      c: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getSeaportMetadata(
      overrides?: CallOverrides
    ): Promise<
      [string, SchemaStructOutput[]] & {
        name: string;
        schemas: SchemaStructOutput[];
      }
    >;

    itemAmountMutations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, string] & {
        side: number;
        index: BigNumber;
        newAmount: BigNumber;
        orderHash: string;
      }
    >;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    orderHashToGenerateOrderDataHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    orderHashToRatifyOrderDataHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    previewOrder(
      caller: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      a: SpentItemStruct[],
      b: SpentItemStruct[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [SpentItemStructOutput[], ReceivedItemStructOutput[]] & {
        offer: SpentItemStructOutput[];
        consideration: ReceivedItemStructOutput[];
      }
    >;

    ratifyOrder(
      arg0: SpentItemStruct[],
      arg1: ReceivedItemStruct[],
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>[],
      contractNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExpectedOfferRecipient(
      expectedOfferRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFailureReason(
      orderHash: PromiseOrValue<BytesLike>,
      newFailureReason: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSeaportAddress(
      seaportAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addDropItemMutation(
    side: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    orderHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addExtraItemMutation(
    side: PromiseOrValue<BigNumberish>,
    item: ReceivedItemStruct,
    orderHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addItemAmountMutation(
    side: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    newAmount: PromiseOrValue<BigNumberish>,
    orderHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dropItemMutations(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, string] & {
      side: number;
      index: BigNumber;
      orderHash: string;
    }
  >;

  extraItemMutations(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, ReceivedItemStructOutput, string] & {
      side: number;
      item: ReceivedItemStructOutput;
      orderHash: string;
    }
  >;

  failureReasons(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  generateOrder(
    fulfiller: PromiseOrValue<string>,
    a: SpentItemStruct[],
    b: SpentItemStruct[],
    c: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getSeaportMetadata(
    overrides?: CallOverrides
  ): Promise<
    [string, SchemaStructOutput[]] & {
      name: string;
      schemas: SchemaStructOutput[];
    }
  >;

  itemAmountMutations(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, string] & {
      side: number;
      index: BigNumber;
      newAmount: BigNumber;
      orderHash: string;
    }
  >;

  onERC1155Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  orderHashToGenerateOrderDataHash(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  orderHashToRatifyOrderDataHash(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  previewOrder(
    caller: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    a: SpentItemStruct[],
    b: SpentItemStruct[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [SpentItemStructOutput[], ReceivedItemStructOutput[]] & {
      offer: SpentItemStructOutput[];
      consideration: ReceivedItemStructOutput[];
    }
  >;

  ratifyOrder(
    arg0: SpentItemStruct[],
    arg1: ReceivedItemStruct[],
    arg2: PromiseOrValue<BytesLike>,
    arg3: PromiseOrValue<BytesLike>[],
    contractNonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExpectedOfferRecipient(
    expectedOfferRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFailureReason(
    orderHash: PromiseOrValue<BytesLike>,
    newFailureReason: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSeaportAddress(
    seaportAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addDropItemMutation(
      side: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addExtraItemMutation(
      side: PromiseOrValue<BigNumberish>,
      item: ReceivedItemStruct,
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addItemAmountMutation(
      side: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      newAmount: PromiseOrValue<BigNumberish>,
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    dropItemMutations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string] & {
        side: number;
        index: BigNumber;
        orderHash: string;
      }
    >;

    extraItemMutations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, ReceivedItemStructOutput, string] & {
        side: number;
        item: ReceivedItemStructOutput;
        orderHash: string;
      }
    >;

    failureReasons(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    generateOrder(
      fulfiller: PromiseOrValue<string>,
      a: SpentItemStruct[],
      b: SpentItemStruct[],
      c: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [SpentItemStructOutput[], ReceivedItemStructOutput[]] & {
        offer: SpentItemStructOutput[];
        consideration: ReceivedItemStructOutput[];
      }
    >;

    getSeaportMetadata(
      overrides?: CallOverrides
    ): Promise<
      [string, SchemaStructOutput[]] & {
        name: string;
        schemas: SchemaStructOutput[];
      }
    >;

    itemAmountMutations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, string] & {
        side: number;
        index: BigNumber;
        newAmount: BigNumber;
        orderHash: string;
      }
    >;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    orderHashToGenerateOrderDataHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    orderHashToRatifyOrderDataHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    previewOrder(
      caller: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      a: SpentItemStruct[],
      b: SpentItemStruct[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [SpentItemStructOutput[], ReceivedItemStructOutput[]] & {
        offer: SpentItemStructOutput[];
        consideration: ReceivedItemStructOutput[];
      }
    >;

    ratifyOrder(
      arg0: SpentItemStruct[],
      arg1: ReceivedItemStruct[],
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>[],
      contractNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setExpectedOfferRecipient(
      expectedOfferRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFailureReason(
      orderHash: PromiseOrValue<BytesLike>,
      newFailureReason: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSeaportAddress(
      seaportAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "GenerateOrderDataHash(bytes32,bytes32)"(
      orderHash?: null,
      dataHash?: null
    ): GenerateOrderDataHashEventFilter;
    GenerateOrderDataHash(
      orderHash?: null,
      dataHash?: null
    ): GenerateOrderDataHashEventFilter;

    "RatifyOrderDataHash(bytes32,bytes32)"(
      orderHash?: null,
      dataHash?: null
    ): RatifyOrderDataHashEventFilter;
    RatifyOrderDataHash(
      orderHash?: null,
      dataHash?: null
    ): RatifyOrderDataHashEventFilter;
  };

  estimateGas: {
    addDropItemMutation(
      side: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addExtraItemMutation(
      side: PromiseOrValue<BigNumberish>,
      item: ReceivedItemStruct,
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addItemAmountMutation(
      side: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      newAmount: PromiseOrValue<BigNumberish>,
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dropItemMutations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extraItemMutations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    failureReasons(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateOrder(
      fulfiller: PromiseOrValue<string>,
      a: SpentItemStruct[],
      b: SpentItemStruct[],
      c: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getSeaportMetadata(overrides?: CallOverrides): Promise<BigNumber>;

    itemAmountMutations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderHashToGenerateOrderDataHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderHashToRatifyOrderDataHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewOrder(
      caller: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      a: SpentItemStruct[],
      b: SpentItemStruct[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ratifyOrder(
      arg0: SpentItemStruct[],
      arg1: ReceivedItemStruct[],
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>[],
      contractNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExpectedOfferRecipient(
      expectedOfferRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFailureReason(
      orderHash: PromiseOrValue<BytesLike>,
      newFailureReason: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSeaportAddress(
      seaportAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDropItemMutation(
      side: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addExtraItemMutation(
      side: PromiseOrValue<BigNumberish>,
      item: ReceivedItemStruct,
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addItemAmountMutation(
      side: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      newAmount: PromiseOrValue<BigNumberish>,
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dropItemMutations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extraItemMutations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    failureReasons(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateOrder(
      fulfiller: PromiseOrValue<string>,
      a: SpentItemStruct[],
      b: SpentItemStruct[],
      c: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getSeaportMetadata(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemAmountMutations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderHashToGenerateOrderDataHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderHashToRatifyOrderDataHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewOrder(
      caller: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      a: SpentItemStruct[],
      b: SpentItemStruct[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ratifyOrder(
      arg0: SpentItemStruct[],
      arg1: ReceivedItemStruct[],
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>[],
      contractNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExpectedOfferRecipient(
      expectedOfferRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFailureReason(
      orderHash: PromiseOrValue<BytesLike>,
      newFailureReason: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSeaportAddress(
      seaportAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
